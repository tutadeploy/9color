version: "3.8"

services:
  mysql:
    image: mysql:5.7
    container_name: 9color_mysql_standalone
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-6ui}
      MYSQL_USER: ${MYSQL_USER:-app}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-app123456}
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_backup:/var/backups
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql/00-create-database.sql:/docker-entrypoint-initdb.d/00-create-database.sql
      - ./mysql/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./logs/mysql:/var/log/mysql
      - ./backup:/backup
    networks:
      - db-network
    restart: unless-stopped
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --bind-address=0.0.0.0
      --log-bin=mysql-bin
      --binlog-format=ROW
      --expire-logs-days=7
      --max-connections=500
      --innodb-buffer-pool-size=1G

  # 数据库备份服务
  mysql-backup:
    image: mysql:5.7
    container_name: 9color_mysql_backup
    depends_on:
      - mysql
    volumes:
      - mysql_backup:/var/backups
      - ./backup:/backup
      - ./scripts:/scripts
    networks:
      - db-network
    environment:
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-6ui}
    command: >
      sh -c "
        while ! mysqladmin ping -h mysql -u root -p${MYSQL_ROOT_PASSWORD:-root123456} --silent; do
          echo 'Waiting for MySQL to be ready...'
          sleep 10
        done
        echo 'MySQL is ready, starting backup scheduler...'
        /scripts/backup-scheduler.sh
      "
    restart: unless-stopped

  # Redis缓存服务（可选，提升性能）
  redis:
    image: redis:6.2-alpine
    container_name: 9color_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - db-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf

volumes:
  mysql_data:
    driver: local
  mysql_backup:
    driver: local
  redis_data:
    driver: local

networks:
  db-network:
    driver: bridge 